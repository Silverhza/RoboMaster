// Generated by gencpp from file modified_chassis/RechargeGoal.msg
// DO NOT EDIT!


#ifndef MODIFIED_CHASSIS_MESSAGE_RECHARGEGOAL_H
#define MODIFIED_CHASSIS_MESSAGE_RECHARGEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace modified_chassis
{
template <class ContainerAllocator>
struct RechargeGoal_
{
  typedef RechargeGoal_<ContainerAllocator> Type;

  RechargeGoal_()
    : robot_id(0)  {
    }
  RechargeGoal_(const ContainerAllocator& _alloc)
    : robot_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _robot_id_type;
  _robot_id_type robot_id;





  typedef boost::shared_ptr< ::modified_chassis::RechargeGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::modified_chassis::RechargeGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RechargeGoal_

typedef ::modified_chassis::RechargeGoal_<std::allocator<void> > RechargeGoal;

typedef boost::shared_ptr< ::modified_chassis::RechargeGoal > RechargeGoalPtr;
typedef boost::shared_ptr< ::modified_chassis::RechargeGoal const> RechargeGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::modified_chassis::RechargeGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::modified_chassis::RechargeGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::modified_chassis::RechargeGoal_<ContainerAllocator1> & lhs, const ::modified_chassis::RechargeGoal_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::modified_chassis::RechargeGoal_<ContainerAllocator1> & lhs, const ::modified_chassis::RechargeGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace modified_chassis

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::modified_chassis::RechargeGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::modified_chassis::RechargeGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modified_chassis::RechargeGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::modified_chassis::RechargeGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modified_chassis::RechargeGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::modified_chassis::RechargeGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::modified_chassis::RechargeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "643c2c9b3dd26758833f013bbe8b0a36";
  }

  static const char* value(const ::modified_chassis::RechargeGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x643c2c9b3dd26758ULL;
  static const uint64_t static_value2 = 0x833f013bbe8b0a36ULL;
};

template<class ContainerAllocator>
struct DataType< ::modified_chassis::RechargeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "modified_chassis/RechargeGoal";
  }

  static const char* value(const ::modified_chassis::RechargeGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::modified_chassis::RechargeGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"uint32 robot_id  # Specify which robot we want to recharge\n"
;
  }

  static const char* value(const ::modified_chassis::RechargeGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::modified_chassis::RechargeGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RechargeGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::modified_chassis::RechargeGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::modified_chassis::RechargeGoal_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.robot_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MODIFIED_CHASSIS_MESSAGE_RECHARGEGOAL_H
