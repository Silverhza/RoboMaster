// Generated by gencpp from file ros_yolo/Box.msg
// DO NOT EDIT!


#ifndef ROS_YOLO_MESSAGE_BOX_H
#define ROS_YOLO_MESSAGE_BOX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_yolo
{
template <class ContainerAllocator>
struct Box_
{
  typedef Box_<ContainerAllocator> Type;

  Box_()
    : xmin(0.0)
    , ymin(0.0)
    , xmax(0.0)
    , ymax(0.0)
    , confidence(0.0)
    , obj()
    , distance(0.0)  {
    }
  Box_(const ContainerAllocator& _alloc)
    : xmin(0.0)
    , ymin(0.0)
    , xmax(0.0)
    , ymax(0.0)
    , confidence(0.0)
    , obj(_alloc)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef float _xmin_type;
  _xmin_type xmin;

   typedef float _ymin_type;
  _ymin_type ymin;

   typedef float _xmax_type;
  _xmax_type xmax;

   typedef float _ymax_type;
  _ymax_type ymax;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obj_type;
  _obj_type obj;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::ros_yolo::Box_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_yolo::Box_<ContainerAllocator> const> ConstPtr;

}; // struct Box_

typedef ::ros_yolo::Box_<std::allocator<void> > Box;

typedef boost::shared_ptr< ::ros_yolo::Box > BoxPtr;
typedef boost::shared_ptr< ::ros_yolo::Box const> BoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_yolo::Box_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_yolo::Box_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_yolo::Box_<ContainerAllocator1> & lhs, const ::ros_yolo::Box_<ContainerAllocator2> & rhs)
{
  return lhs.xmin == rhs.xmin &&
    lhs.ymin == rhs.ymin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymax == rhs.ymax &&
    lhs.confidence == rhs.confidence &&
    lhs.obj == rhs.obj &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_yolo::Box_<ContainerAllocator1> & lhs, const ::ros_yolo::Box_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_yolo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_yolo::Box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_yolo::Box_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_yolo::Box_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_yolo::Box_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_yolo::Box_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_yolo::Box_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_yolo::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a88885b4a916fee405bb38cc0f4a8fce";
  }

  static const char* value(const ::ros_yolo::Box_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa88885b4a916fee4ULL;
  static const uint64_t static_value2 = 0x05bb38cc0f4a8fceULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_yolo::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_yolo/Box";
  }

  static const char* value(const ::ros_yolo::Box_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_yolo::Box_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xmin # xmin\n"
"float32 ymin  # ymin\n"
"float32 xmax #xmax\n"
"float32 ymax #ymax\n"
"\n"
"float32 confidence \n"
"string obj\n"
"float32 distance\n"
;
  }

  static const char* value(const ::ros_yolo::Box_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_yolo::Box_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
      stream.next(m.confidence);
      stream.next(m.obj);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Box_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_yolo::Box_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_yolo::Box_<ContainerAllocator>& v)
  {
    s << indent << "xmin: ";
    Printer<float>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<float>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<float>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<float>::stream(s, indent + "  ", v.ymax);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "obj: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obj);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_YOLO_MESSAGE_BOX_H
