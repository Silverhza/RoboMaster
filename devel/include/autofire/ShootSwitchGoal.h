// Generated by gencpp from file autofire/ShootSwitchGoal.msg
// DO NOT EDIT!


#ifndef AUTOFIRE_MESSAGE_SHOOTSWITCHGOAL_H
#define AUTOFIRE_MESSAGE_SHOOTSWITCHGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autofire
{
template <class ContainerAllocator>
struct ShootSwitchGoal_
{
  typedef ShootSwitchGoal_<ContainerAllocator> Type;

  ShootSwitchGoal_()
    : cmd_id(0)  {
    }
  ShootSwitchGoal_(const ContainerAllocator& _alloc)
    : cmd_id(0)  {
  (void)_alloc;
    }



   typedef uint32_t _cmd_id_type;
  _cmd_id_type cmd_id;





  typedef boost::shared_ptr< ::autofire::ShootSwitchGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autofire::ShootSwitchGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ShootSwitchGoal_

typedef ::autofire::ShootSwitchGoal_<std::allocator<void> > ShootSwitchGoal;

typedef boost::shared_ptr< ::autofire::ShootSwitchGoal > ShootSwitchGoalPtr;
typedef boost::shared_ptr< ::autofire::ShootSwitchGoal const> ShootSwitchGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autofire::ShootSwitchGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autofire::ShootSwitchGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autofire::ShootSwitchGoal_<ContainerAllocator1> & lhs, const ::autofire::ShootSwitchGoal_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_id == rhs.cmd_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autofire::ShootSwitchGoal_<ContainerAllocator1> & lhs, const ::autofire::ShootSwitchGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autofire

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autofire::ShootSwitchGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autofire::ShootSwitchGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autofire::ShootSwitchGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autofire::ShootSwitchGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autofire::ShootSwitchGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autofire::ShootSwitchGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autofire::ShootSwitchGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a153ff01b10e544dddcef41f8843134";
  }

  static const char* value(const ::autofire::ShootSwitchGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a153ff01b10e544ULL;
  static const uint64_t static_value2 = 0xdddcef41f8843134ULL;
};

template<class ContainerAllocator>
struct DataType< ::autofire::ShootSwitchGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autofire/ShootSwitchGoal";
  }

  static const char* value(const ::autofire::ShootSwitchGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autofire::ShootSwitchGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"uint32 cmd_id  # Specify which robot we want to recharge 1 enable 2 disable \n"
;
  }

  static const char* value(const ::autofire::ShootSwitchGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autofire::ShootSwitchGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShootSwitchGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autofire::ShootSwitchGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autofire::ShootSwitchGoal_<ContainerAllocator>& v)
  {
    s << indent << "cmd_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cmd_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOFIRE_MESSAGE_SHOOTSWITCHGOAL_H
